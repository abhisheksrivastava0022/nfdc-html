// Mixin to convert px to vw and include font weight and font family
// _mixins.scss

@mixin font-style($sizeValue, $fontWeight: normal, $fontFamily: 'Sora', $viewportWidth: 1920px) {
  font-size: ($sizeValue / $viewportWidth) * 100vw;
  font-weight: $fontWeight;
  font-family: $fontFamily;
}

.sora-thin {
  font-family: "Sora", sans-serif;
  font-optical-sizing: auto;
  font-weight: 100;
  font-style: normal;
}

// Example usage
//     @include font-size(24px, 1440px);
//     @include font-style(24px, bold, 'Arial, sans-serif');
// @include font-style(24px); // Uses default font-weight and font-family










// Breakpoints
$breakpoints: (
  xs: 480px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1440px
);

// Mixin for applying styles within a media query based on breakpoints
@mixin respond-to($breakpoint) {
  $breakpoint-size: map-get($breakpoints, $breakpoint);

  @media (max-width: $breakpoint-size) {
    @content;
  }
}

// Example usage
// .responsive-text {
//   width: 100%;

//   @include respond-to(lg) {
//     width: 75%;
//   }

//   @include respond-to(md) {
//     width: 50%;
//   }

//   @include respond-to(sm) {
//     width: 25%;
//   }

//   @include respond-to(xs) {
//     width: 10%;
//   }
// }

// h4{
//        @include font-style(24px, 500,'Sora, sans-serif',1920px);
// }





// Mixin for maintaining aspect ratio of images
@mixin aspect-ratio($width, $height) {
  position: relative;
  width: 100%;
  padding-bottom: ($height / $width) * 100%; // Calculate aspect ratio
  overflow: hidden;

  img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain; // Adjust according to your needs
  }
}

//   .container {
//     @include aspect-ratio(16, 9); // Example aspect ratio (16:9)
//   }






// Mixin for setting min-height and max-height in the ::before pseudo-element
@mixin before-minmax-height($minHeight, $maxHeight) {
  &::before {
    content: "";
    display: block;
    min-height: $minHeight;
    max-height: $maxHeight;
  }
}






// Mixin for applying color 

// variables
// Primary color variations
$primary-base: #973A64;
$primary-100: lighten($primary-base, 40%);
$primary-200: lighten($primary-base, 30%);
$primary-300: lighten($primary-base, 20%);
$primary-400: lighten($primary-base, 10%);
$primary-500: $primary-base;
$primary-600: darken($primary-base, 10%);
$primary-700: darken($primary-base, 20%);

// Secondary color variations
$secondary-base: #e74c3c;
$secondary-100: lighten($secondary-base, 40%);
$secondary-200: lighten($secondary-base, 30%);
$secondary-300: lighten($secondary-base, 20%);
$secondary-400: lighten($secondary-base, 10%);
$secondary-500: $secondary-base;
$secondary-600: darken($secondary-base, 10%);
$secondary-700: darken($secondary-base, 20%);

// Tertiary color variations
$tertiary-base: #2ecc71;
$tertiary-100: lighten($tertiary-base, 40%);
$tertiary-200: lighten($tertiary-base, 30%);
$tertiary-300: lighten($tertiary-base, 20%);
$tertiary-400: lighten($tertiary-base, 10%);
$tertiary-500: $tertiary-base;
$tertiary-600: darken($tertiary-base, 10%);
$tertiary-700: darken($tertiary-base, 20%);

// Gradient color variations
$gradientOne: linear-gradient(44.43deg, #3E4EB0 -20.27%, #164E47 105%);
$gradientTwo: linear-gradient(225deg, #3E4EB0 0%, #164E47 100%);

// grey color varations
$grey-100: #F1F0F1;
$grey-400: #867C7E;
$grey-500: #615A5B;
$grey-200: #C1BCBB;
$grey-700: #1E1B1C;
$grey-600: #3E393A;
@mixin text-gdOne() {
  background: -webkit-linear-gradient(44.43deg, #3E4EB0 -20.27%, #164E47 105%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin apply-colors($color, $apply-bg: true, $apply-border: true, $apply-text: true) {
  @if $apply-text {
    color: $color;
  }

  @if $apply-bg {
    background-color: $color;
  }

  @if $apply-border {
    border-color: $color;
  }
}

// Example usage
//   .button {
//     @include apply-colors($primary-color);
//   }

//   .alert {
//     @include apply-colors($alert-color);
//   }




// svg mixin
@mixin auto-adjust-svg($width: 100%, $height: auto) {
  width: $width;
  height: $height;

  svg {
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    display: block;
    overflow: visible;
  }

  // Optional: If you want to set the viewBox dynamically
  @if $width !=100% and $height !=auto {
    $aspect-ratio: (
      $width / $height) * 100%;
    padding-bottom: $aspect-ratio;

    svg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }

  else {
    svg {
      display: inline-block;
    }
  }
}